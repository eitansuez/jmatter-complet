<project name="jmatter-parent" default="make-distro">

  <description>jMatter uber build file</description>

  <property name="build.dir" location="build" />
  <property name="dist.dir" location="dist" />

  <property name="jmatter.dir" location="${basedir}/jmatter" />
  <property name="demo.dir" location="${basedir}/demo-apps" />
  <property name="modules.dir" location="${basedir}/modules" />

  <property name="build.target.dir" location="${build.dir}/jmatter" />
  
  <!-- TARGETS -->

  <target name="init">
    <tstamp />
    <mkdir dir="${build.target.dir}" />
    <mkdir dir="${dist.dir}" />
    <uptodate property="pdfdoc-exists" srcfile="${jmatter.dir}/doc/guide.lyx" targetfile="${jmatter.dir}/doc/guide.pdf" />
  </target>
 
  <target name="clean">
    <delete dir="${build.dir}" />
  </target>

  <target name="update-modules" 
          description="rebuild/update modules code (copies jars to framework lib dir)">
   <ant antfile="${modules.dir}/ds-swing/build.xml" inheritAll="false">
     <target name="clean" />
     <target name="jar" />
   </ant>
   <ant antfile="${modules.dir}/ds-wizard/build.xml" inheritAll="false">
     <target name="clean" />
     <target name="jar" />
   </ant>
   <copy todir="${jmatter.dir}/lib/src">
    <fileset dir="${modules.dir}/ds-swing/dist" includes="ds-swing.jar" />
    <fileset dir="${modules.dir}/ds-wizard/dist" includes="ds-wizard.jar" />
   </copy>
  </target>


  <target name="preliminaries" 
          depends="clean, init, update-modules, clean-subs, makedoc-pdf" />

  <target name="makedoc-pdf" unless="pdfdoc-exists"
          description="produce pdf documentation (if necessary)">
    <exec dir="${jmatter.dir}/doc" executable="lyx-qt">
      <arg line="--export pdf guide.lyx" />
    </exec>
  </target>

  <target name="make-distro" 
          description="create jMatter binary distributions" 
          depends="preliminaries">
          
   <ant antfile="${jmatter.dir}/build.xml" inheritAll="false" target="jar" />

   <mkdir dir="${build.target.dir}/doc" />
   <copy todir="${build.target.dir}/doc" file="${jmatter.dir}/doc/guide.pdf" />
   <mkdir dir="${build.target.dir}/lib" />
   <copy todir="${build.target.dir}/lib">
    <fileset dir="${jmatter.dir}/lib" includes="src/**/*.jar" />
    <fileset dir="${jmatter.dir}/lib" includes="tools/**/*.jar" />
    <fileset dir="${jmatter.dir}/lib" includes="test/**/*.jar" />
    <fileset dir="${jmatter.dir}/dist" includes="jmatter.jar" />
   </copy>
   <copy todir="${build.target.dir}" file="${jmatter.dir}/doc/jMatter-License" />
   <exec dir="${jmatter.dir}/doc" executable="markdown" output="${build.target.dir}/jMatter-License.html">
     <arg line="jMatter-License" />
   </exec>
   <copy todir="${build.target.dir}" file="${jmatter.dir}/resources/distro-prototype/build.xml" />
   <copy todir="${build.target.dir}">
    <fileset dir="${jmatter.dir}/resources" includes="project-template/**/*" />
   </copy> 
   <copy todir="${build.target.dir}">
     <fileset dir="." includes="demo-apps/**/*" />
   </copy>
   <antcall target="demoapp-buildfile"> <param name="demoapp.name" value="ContactMgr" /> </antcall>
   <antcall target="demoapp-buildfile"> <param name="demoapp.name" value="IssueMgr" /> </antcall>
   <antcall target="demoapp-buildfile"> <param name="demoapp.name" value="Sympster" /> </antcall>
   <antcall target="demoapp-buildfile"> <param name="demoapp.name" value="MovieLib" /> </antcall>
   <antcall target="demoapp-buildfile"> <param name="demoapp.name" value="MyTunes" /> </antcall>
   <antcall target="demoapp-buildfile"> <param name="demoapp.name" value="CustomUI" /> </antcall>

   <zip basedir="${build.dir}" destfile="${dist.dir}/jmatter-bin-${DSTAMP}.zip" />
   <tar basedir="${build.dir}" destfile="${dist.dir}/jmatter-bin-${DSTAMP}.tgz" compression="gzip" />

  </target>

  <target name="demoapp-buildfile">
    <copy tofile="${build.target.dir}/demo-apps/${demoapp.name}/build.xml" 
          file="${jmatter.dir}/resources/distro-prototype/demoapp-build.xml" 
          filtering="true" overwrite="true">
      <filterset>
        <filter token="PROJECTNAME" value="${demoapp.name}" />
      </filterset>
    </copy>
  </target>
   
  <target name="make-source-distro" 
          description="Produce source distribution" 
          depends="preliminaries">

   <mkdir dir="${build.target.dir}/doc" />
   <copy todir="${build.target.dir}/doc" file="${jmatter.dir}/doc/guide.pdf" />

   <copy todir="${build.target.dir}">
    <fileset dir="${jmatter.dir}" includes="build.xml" />
    <fileset dir="${jmatter.dir}" includes="src/**/*" />
    <fileset dir="${jmatter.dir}" includes="test/**/*" />
    <fileset dir="${jmatter.dir}" includes="lib/**/*.jar" />
   </copy>
   
   <mkdir dir="${build.target.dir}/resources" />
   <copy todir="${build.target.dir}/resources">
    <fileset dir="${jmatter.dir}/resources" includes="binding.xml" />
    <fileset dir="${jmatter.dir}/resources" includes="data/**/*" />
    <fileset dir="${jmatter.dir}/resources" includes="images/**/*" />
    <fileset dir="${jmatter.dir}/resources" includes="jfreereport.properties" />
    <fileset dir="${jmatter.dir}/resources" includes="project-template/**/*" />
   </copy>

   <copy todir="${build.dir}">
     <fileset dir="." includes="demo-apps/**/*" />
   </copy>

   <zip basedir="${build.dir}" destfile="${dist.dir}/jmatter-src-${DSTAMP}.zip" />
   <tar basedir="${build.dir}" destfile="${dist.dir}/jmatter-src-${DSTAMP}.tgz" compression="gzip" />

  </target>

  
  <target name="clean-subs" description="invoke clean target on jmatter and demo apps">
      <ant antfile="${jmatter.dir}/build.xml" inheritAll="false" target="clean" />
      <ant antfile="${demo.dir}/ContactMgr/build.xml" inheritAll="false" target="clean" />
      <ant antfile="${demo.dir}/IssueMgr/build.xml" inheritAll="false" target="clean" />
      <ant antfile="${demo.dir}/Sympster/build.xml" inheritAll="false" target="clean" />
      <ant antfile="${demo.dir}/MovieLib/build.xml" inheritAll="false" target="clean" />
      <ant antfile="${demo.dir}/MyTunes/build.xml" inheritAll="false" target="clean" />
  </target>


  <target name="checksum-all" description="generate checksum files for distributions">
    <antcall target="checksum">
      <param name="algorithm" value="MD5" />
    </antcall>
    <antcall target="checksum">
      <param name="algorithm" value="SHA-1" />
    </antcall>
  </target>

  <target name="checksum">
    <checksum algorithm="${algorithm}">
      <fileset dir="${dist.dir}" includes="*.tgz, *.zip" />
    </checksum>
  </target>

</project>

