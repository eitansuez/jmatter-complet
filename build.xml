<project name="jmatter-distributor" default="make-distro-and-checksums">

  <description>This build file produces official JMatter distributions</description>

  <property name="build.dir" location="build" />
  <property name="dist.dir" location="dist" />
  <property name="build.target.dir" location="${build.dir}/jmatter" />
  
  <property name="jmatter.dir" location="${basedir}/jmatter" />
  <property name="demo.dir" location="${basedir}/demo-apps" />
  <property name="modules.dir" location="${basedir}/modules" />
  <property name="appbrowser.dir" location="${basedir}/AppBrowser" />

  <!-- TARGETS -->

  <target name="init">
    <tstamp />
    <mkdir dir="${build.target.dir}" />
    <mkdir dir="${dist.dir}" />
    <uptodate property="pdfdoc-exists" srcfile="${jmatter.dir}/doc/guide.lyx" targetfile="${jmatter.dir}/doc/guide.pdf" />
  </target>
 
  <target name="clean">
    <delete dir="${build.dir}" />
  </target>

  <target name="make-distribution"
          depends="clean, init, include-demoapps, include-modules, include-appbrowser, make-jmatter-jar, makedoc-pdf"
          description="Produce jmatter distribution">
     
   <copy todir="${build.target.dir}">
     <fileset dir="${jmatter.dir}" includes="doc/Changes*,doc/Credits,doc/guide.pdf,doc/jMatter-license" />
     <fileset dir="${jmatter.dir}" includes="build.xml" />
     <fileset dir="${jmatter.dir}" includes="src/**/*" />
     <fileset dir="${jmatter.dir}" includes="test/**/*" />
     <fileset dir="${jmatter.dir}" includes="lib/**/*.jar" />
     <fileset dir="${jmatter.dir}" includes="resources/**/*" />
     <fileset dir="${jmatter.dir}" includes="tools/**/*" />
     <fileset dir="${jmatter.dir}" includes="dist/**/*" /> <!-- precompiled binary -->
   </copy>
     
   <exec dir="${jmatter.dir}/doc" executable="markdown" output="${build.target.dir}/doc/jMatter-License.html">
     <arg line="jMatter-License" />
   </exec>

   <copy tofile="${build.dir}/Release_notes">
     <fileset dir="${jmatter.dir}/doc" includes="Changes" />
   </copy>
   <exec dir="${build.dir}" executable="markdown" output="${build.dir}/Release_notes.html">
     <arg line="Release_notes" />
   </exec>

   <!-- how can i create a property whose 
        name is dynamically computed based on ${DSTAMP}? -->
   <mkdir dir="${build.dir}/jmatter-${DSTAMP}" />
   <move todir="${build.dir}/jmatter-${DSTAMP}">
      <fileset dir="${build.dir}" excludes="jmatter-${DSTAMP}" />
   </move>
   <zip basedir="${build.dir}" destfile="${dist.dir}/jmatter-${DSTAMP}.zip" />
   <tar basedir="${build.dir}" destfile="${dist.dir}/jmatter-${DSTAMP}.tgz" compression="gzip" />

  </target>


   <target name="make-jmatter-jar">
      <!-- ensure to produce and include a binary in the distribution -->
      <ant antfile="${jmatter.dir}/build.xml" inheritAll="false" target="cleanjar"/>
      <!-- then get rid of artifacts -->
      <ant antfile="${jmatter.dir}/build.xml" inheritAll="false" target="clean"/>
   </target>

   <target name="makedoc-pdf" unless="pdfdoc-exists"
          description="produce pdf documentation (if necessary)">
    <exec dir="${jmatter.dir}/doc" executable="lyx">
      <arg line="--export pdf2 guide.lyx" /> <!-- pdf2 is lyx to pdflatex option -->
    </exec>
  </target>
   
   
   <!--    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  -->
   
   <target name="include-demoapps" depends="clean-demoapps">
      <copy todir="${build.dir}">
        <fileset dir="${basedir}" includes="demo-apps/**/*" />
      </copy>
   </target>
   
   <target name="clean-demoapps">
      <ant antfile="${demo.dir}/ContactMgr/build.xml" inheritAll="false" target="clean"/>
      <ant antfile="${demo.dir}/IssueMgr/build.xml" inheritAll="false" target="clean"/>
      <ant antfile="${demo.dir}/Sympster/build.xml" inheritAll="false" target="clean"/>
      <ant antfile="${demo.dir}/MovieLib/build.xml" inheritAll="false" target="clean"/>
      <ant antfile="${demo.dir}/MyTunes/build.xml" inheritAll="false" target="clean"/>
      <ant antfile="${demo.dir}/CustomUI/build.xml" inheritAll="false" target="clean"/>
   </target>
   
   <target name="include-appbrowser">
      <ant antfile="${appbrowser.dir}/build.xml" inheritAll="false" target="clean"/>
      <copy todir="${build.dir}">
        <fileset dir="${basedir}" includes="AppBrowser/**/*" />
      </copy>
   </target>
   
   <!--    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  -->

   <target name="include-modules" depends="clean-modules">
      <copy todir="${build.dir}">
         <fileset dir="${basedir}" includes="modules/**/*" />
      </copy>
   </target>
   
   <target name="clean-modules">
      <ant antfile="modules/ds-swing/build.xml" inheritAll="false" target="clean" />
      <ant antfile="modules/ds-wizard/build.xml" inheritAll="false" target="clean" />
      <ant antfile="modules/echo2vm/build.xml" inheritAll="false" target="clean" />
      <ant antfile="modules/jmatter-tools/build.xml" inheritAll="false" target="clean" />
      <ant antfile="modules/swingvm/build.xml" inheritAll="false" target="clean" />
      <ant antfile="modules/wingsvm/build.xml" inheritAll="false" target="clean" />
   </target>
   
   <!--    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  -->

   <target name="checksum-distributions" depends="make-distribution"
           description="generate checksum files for distributions">
     <antcall target="checksum">
       <param name="algorithm" value="MD5" />
     </antcall>
     <antcall target="checksum">
       <param name="algorithm" value="SHA-1" />
     </antcall>
   </target>

   <target name="checksum">
     <checksum algorithm="${algorithm}">
       <fileset dir="${dist.dir}" includes="*.tgz, *.zip" />
     </checksum>
   </target>
  
   <target name="make-distro-and-checksums" depends="checksum-distributions" 
      description="construct jmatter distributions and corresponding checksums" />

   <!--    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  -->
   
   
   
</project>

