When write project to disk:  carry over project description to ant build file's project description

~~~todo~~~~~~~~~~~~~~~~~~~~~~~~~~
> Add the abililty to add an item to a list using the keyboard
--
1. field type should be an association to a type.  all types, including things like StringEO should be in there.
2. introduce a field type hierarchy
--
1. support all @Cmd attributes (shortcut, batchable, iconref)
2. deal with bidirectionality in associations / inversefieldname
3. write command on project to write out all entities
4. write command to write out marshalled project as a single text field

~~~refactorings~~~~~~~~~~~~~~~~~~~~~~~~~~
1. naturalName() -> should instead have a @Cls or @Type annotation with
  label="".  this would be consistent with @Fld(label="")
2. likewise, get rid of pluralName() and instead use @Type(plural="")
3. Need the notion of a pluralization strategy for different locales.  Likewise need a field path composition strategy.  Could be as simple as "before" vs "after";  also useful would be the notion of a concatenator.  Then revise impl for pluralization and field concatenation to locale strategy.  Define simple interface for others to implement.  Simple mechanism for picking all implementations of the interface located in a certain directory and dynamically registering it with the implementation.
4. Sure would be nice if lists could be easily edited in place.

~~~requirements~~~~~~~~~~~~~~~~~~~~~~~~~~
- the idea of separating the information you need that defines a complete application
  from the generation of the artifacts (that includes the source code) needed to run it.
- want it to support complete metamodel;  all options.
- should support writing / generating the project "skeleton" (do what newprojectui ant target does)
- support writing png icons for an entity to resources/images folder
- missing:  state support
- would be cool to have a ui reflection of the project's build targets:  schema-export, compile, etc..


~~~~entities~~~~~~~~~~~~~~~~~~~~~~~~~
  Project
    --fields:
x   Name (used for directory name)
x   Caption (used as a label)
x   Description
x   Splash Image
x   Default Package Name for Entities
x   Location on Disk (?)
    --commands:
    WriteProjectToDisk(FileWEO.. destinationDir)
    MarshalCompleteProjectDescriptionToAFriendlySingleFileTextBasedFormatPerhapsJSONBasedForEasyImportExportPurposes
x   AddEntity

  Entity
    --fields:
x   Name (from which class name will be derived)
x   PluralName (override option, default autogenerated)
x   Small Icon (16x16)
x   Large Icon (32x32)
x   Package Name (override option, defaults to Project's)
x   Fields (ordered list/polymorphic)
x   Commands (ordered list)
-   Localizations (list)
    --commands:
x   WriteSourceToClipboard
x   WriteSourceToProject
-   WriteIconsToDisk

x Member
x   Name
x   Caption
x   Description
x   Mnemonic
  
x Field extends Member
x   Identity?
x   Read-only?
    
x Command extends Member
x   Sensitive?
x   Arguments (ordered list)
x   CommandBody (code/TextEO)
x   ReturnType

  Localization
    locale
    LocalizedEntity (similar to entity but with name, member names, etc.. entered in a different language)
 
  LocalizedEntity
    Name
    PluralName
    
  Locale
    code
    name


