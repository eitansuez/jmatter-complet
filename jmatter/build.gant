projectName = 'jmatter'

dependentModules = ['ds-swing', 'ds-wizard']
modules = ['swingvm', 'wingsvm', 'echo2vm']

srcDir = 'src'
libDir = 'lib'
resourcesDir = 'resources'
buildDir = 'build'
distDir = 'dist'

buildClassesDir = buildDir + '/classes'
buildGenDir = buildDir + '/gen'

runtimeLibDir = libDir + '/runtime'
toolsLibDir = libDir + '/tools'
genLibDir = libDir + '/gen'

Ant.path ( id : 'class.path' )
{
  fileset ( dir : runtimeLibDir, includes : '**/*.jar' )
  pathelement ( location : buildClassesDir )
  fileset ( dir : toolsLibDir, includes : 'ant.jar' )
}

target ( init : '')
{
  Ant.tstamp()
  Ant.mkdir ( dir : buildClassesDir )
  Ant.mkdir ( dir : buildGenDir )
  Ant.mkdir ( dir : distDir )
}

target ( clean : 'Clean')
{
  Ant.delete (dir : buildDir )
}

smcJar = genLibDir + '/Smc.jar'
Ant.taskdef (name : 'smc', classname : 'net.sf.smc.ant.SmcJarWrapper', 
             classpath : genLibDir + '/smc-ant.jar' )


target ( gen : 'Generate smc support code' )
{
  depends ( init )
  Ant.mkdir ( dir : buildGenDir + '/com/u2d/app' )
  Ant.smc ( target : 'java' , smfile : srcDir + '/com/u2d/app/AppSession.sm', 
        destdir : buildGenDir + '/com/u2d/app', smcjar : smcJar )
}


target ( compile : 'Compile code' )
{
  depends ( rawCompile, compileModules )
}

target ( rawCompile : 'Compile code' )
{
  depends ( gen, compileDependentModules )
  Ant.javac ( debug : 'on' , deprecation : 'on', 
              classpathref : 'class.path' , listfiles : 'false', 
              target : '1.5', destdir : buildClassesDir )
  {
    compilerarg ( line : '-Xmaxwarns 0' )
    src ( path : srcDir )
    src ( path : buildGenDir )
  }
  Ant.copy ( todir : buildClassesDir )
  {
    fileset ( dir : resourcesDir , includes : 'images/*.gif,images/*.png' )
    fileset ( dir : resourcesDir, includes : 'jfreereport.properties' )
    fileset ( dir : resourcesDir + '/data', includes : '*.xml' )
    fileset ( dir : srcDir , includes : '**/*/xml' )   // wizard fsm
  }
}

target ( compileModules : '') { compileModulesList(modules); }
target ( compileDependentModules : '') { compileModulesList(dependentModules); }

def compileModulesList(moduleList)
{
  moduleList.each { moduleName -> 
    Ant.ant(antfile : "../modules/${moduleName}/build.xml" , inheritAll : 'false', target : 'jar' )
    Ant.copy(file : "../modules/${moduleName}/dist/${moduleName}.jar", todir : runtimeLibDir )
  }
}

target ( justJar : 'just jar jmatter framework (assume compiled)' )
{
  Ant.jar ( basedir : buildClassesDir , file : "${distDir}/${projectName}.jar" )
  {
    manifest
    {
      attribute ( name : 'Created-By', value : 'Eitan Suez' )
    }
  }
}

target ( jar : 'jar jmatter framework' )
{
  depends ( bind, justJar )
}
target (cleanjar : 'clean first, then jar')
{
  depends ( clean, jar )
}

Ant.taskdef ( name : 'bind', classname : 'org.jibx.binding.ant.CompileTask' )
{
  classpath
  {
    pathelement (location : toolsLibDir + '/bcel.jar')
    pathelement (location : toolsLibDir + '/jibx-bind.jar')
    pathelement (location : runtimeLibDir + '/jibx-run.jar')
    pathelement (location : runtimeLibDir + '/xpp3.jar')
  }
}

target ( bind : 'run JiBX binding compiler')
{
  depends ( compile )
  Ant.bind( binding : resourcesDir + '/binding.xml' )
  {
    classpathset ( dir : buildClassesDir )
    classpathset ( dir : runtimeLibDir + '/jibx-run.jar' )
  }
}
   
   
target ( ultraviolet : 'Launch UltraViolet design tool' )
{
  depends ( bind )
  Ant.ant ( antfile : 'tools/ultraviolet/run.xml' , inheritAll : 'false' )
}

target ( javadoc : 'produce jmatter javadocs' )
{
  Ant.javadoc ( sourcepath : srcDir,
                destDir : "$buildDir/javadocs",
                classpathref : 'class.path' ,
                packagenames : 'com.u2d.*' )
}


target ( newProjectUi : 'GUI for creating a new jmatter project' )
{
  depends( jar )
  Ant.java ( classname : 'org.jmatter.tools.NewProjectFrontEnd', 
             classpath : 'lib/tools/newprojectui.jar:lib/runtime/css4swing.jar:lib/runtime/antlr-runtime-3.0.jar',
             fork : 'true' )
}

newProjectName = "new-jmatter-project"
newProjectBasedir = ".."

target ( newProject : 'create a new project (flags: new.project.name, new.project.basedir)' )
{
  depends ( jar )
  def npBasedir = "${newProjectBasedir}/${newProjectName}"
  Ant.mkdir ( dir : npBasedir )
  Ant.copy ( todir : npBasedir , verbose : 'true', filtering : 'true' )
  {
    fileset ( dir : "${resourcesDir}/project-template" )
    filterset 
    {
      filter ( token : 'PROJECTNAME' , value : newProjectName )
      filter ( token : 'FRAMEWORK_DIR', value : Ant.project.properties.basedir )
    }
    def standalone = Ant.project.properties.standalone ;
    if (standalone)
    {
      Ant.copy( todir : "${npBasedir}/lib" )
      {
        fileset (dir: libDir, excludes : 'gen/**' )
      }
      Ant.copy ( file : "${distDir}/${projectName}.jar", todir : "${npBasedir}/lib/runtime" )
      Ant.move ( file : "${npBasedir}/build-standalone.xml", tofile : "${npBasedir}/build.xml" )
    }
    else
    {
      Ant.delete( file : "${npBasedir}/build-standalone.xml" )
    }
  }
  Ant.copy ( todir : "${nbBasedir}/resources/images", overwrite: 'true' )
  {
    fileset ( dir: "${resourcesDir}/project-template/resources/images", includes: '*' )
  }
}

target ( 'default' : 'default target' ) { jar() }

