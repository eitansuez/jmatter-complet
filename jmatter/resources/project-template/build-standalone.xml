<project name="@PROJECTNAME@" default="run">

 <description><!-- TODO: enter project description here --></description>

 <property name="build.dir" location="build" />
 <property name="build.classes.dir" location="${build.dir}/classes" />
 <property name="src.dir" location="src" />

 <property name="lib.basedir" location="lib" />

 <property name="lib.dir" location="${lib.basedir}/src" />
 <property name="lib.tools.dir" location="${lib.basedir}/tools" />
 <property name="lib.web.dir" location="${lib.basedir}/web" />

 <property name="jws-dist.dir" location="jws-dist" />
 <property name="dist.dir" location="dist" />
 <property name="jar.file" location="${jws-dist.dir}/${ant.project.name}.jar" />
 <property name="war.file" location="${dist.dir}/${ant.project.name}.war" />

 <property name="test.dir" location="test" />
 <property name="test.src.dir" location="${test.dir}" />
 <property name="test.classes.dir" location="${build.classes.dir}" />
 <property name="test.lib.dir" location="${lib.basedir}/test" />
 <property name="test.reports.dir" location="${build.dir}/reports" />
	
 <!-- TODO: specify main class here -->
 <property name="main.class" value="com.u2d.app.Application" />
 
 <property name="hbprops" value="hibernate" />

 <path id="class.path">
   <fileset dir="${lib.dir}" includes="**/*.jar" />
   <pathelement location="${build.classes.dir}" />
   <fileset dir="${lib.web.dir}" includes="**/*.jar" />
 </path>

 <target name="init">
   <tstamp />
   <mkdir dir="${build.classes.dir}" />
   <mkdir dir="${jws-dist.dir}" />
   <mkdir dir="${dist.dir}" />
   <available property="keystore.exists" file="tempKeystore"/>
 </target>

 <target name="clean">
   <delete dir="${build.dir}" />
   <delete dir="${jws-dist.dir}" />
   <delete dir="${build.web.dir}" />
   <delete dir="${dist.dir}" />
 </target>

 <path id="test.classpath">
   <path refid="class.path" />
   <fileset dir="${test.lib.dir}" includes="**/*.jar" />
   <pathelement location="${test.classes.dir}" />
 </path>
	
 <target name="keystore" unless="keystore.exists">
   <genkey alias="unknown" storepass="public" keystore="tempKeystore"
           dname="CN=Anonymous Signature, OU=unknown, o=unknown, c=unknown" />
 </target>
 

 <target name="compile" description="compile code" depends="init">
   <javac debug="on" deprecation="on" 
          classpathref="class.path" destdir="${build.classes.dir}" srcdir="${src.dir}" />
   <copy todir="${build.classes.dir}">
      <fileset dir="resources" includes="images/*.gif,images/*.png,**/*.jpg" />
      <fileset dir="resources" includes="model-metadata.properties" />
      <fileset dir="resources" includes="locale-metadata*.properties" />
      <fileset dir="resources/data" includes="*.xml,*.json" /> <!-- codes files -->
      <!-- <fileset dir="resources" includes="log4j.properties" /> -->
      <fileset dir="${src.dir}" includes="**/*.xml" />  <!-- jfree report xmls -->
      <fileset dir="${src.dir}" includes="**/*.gif,**/*.png" />  <!-- any images referenced by jfree report xmls -->
   </copy>
   <copy file="resources/${hbprops}.properties" tofile="${build.classes.dir}/hibernate.properties" />
 </target>
 
 <target name="run" description="run app" depends="genhbm">
   <java classname="${main.class}" classpathref="class.path" 
         fork="true" maxmemory="192m">
    <!-- if you're on linux and if you love beryl, you'll need
       to uncomment this..
     <jvmarg value="-Dawt.toolkit=sun.awt.motif.MToolkit" />
      -->
    <!-- to test localization, uncomment this..
     <sysproperty key="user.language" value="fr" />
      -->
   </java>
 </target>

 <taskdef name="script-maker" classname="com.u2d.tools.ShellScriptMaker" 
          classpath="${lib.tools.dir}/jnlp-maker.jar:${lib.tools.dir}/velocity-dep-1.4.jar" />
 <target name="shellscript" description="produce runnable shell script">
    <script-maker classname="${main.class}"
                  classpathref="class.path"
                  maxmemory="192m" 
                  outputFile="run.sh" />
 </target>

 <target name="jar" description="jar it" depends="clean,genhbm">
   <jar basedir="${build.classes.dir}" file="${jar.file}">
     <manifest>
       <attribute name="Created-By" value="jMatter" />
       <attribute name="Main-Class" value="${main.class}" />
     </manifest>
   </jar>
 </target>


 <target name="schema-export" description="export schema to db">
    <antcall target="schema-x">
      <param name="arg" value="export" />
    </antcall>
 </target>
 <target name="schema-update" description="update db schema">
    <antcall target="schema-x">
      <param name="arg" value="update" />
    </antcall>
 </target>
 <target name="schema-x" depends="genhbm">
    <echo message="performing a schema ${arg}" />
    <java fork="true" classpathref="class.path" 
       classname="com.u2d.persist.HibernatePersistor">
      <arg value="${arg}" />
      <arg value="${build.dir}" />
    </java>
 </target>

 <!-- TODO: (optional) to test .hbm.xml file generation for a single class file,
    specify name of class file in the following property 'class.file' -->
 <property name="class.file" value="com.u2d.nfjs.Talk" />
 <target name="hbmxml" depends="compile">
   <java classname="com.u2d.persist.HBMMaker" 
         classpathref="class.path" 
         fork="true" 
         dir="${build.classes.dir}">
     <arg value="${class.file}" />
   </java>
 </target>
   
   
 <target name="genhbm" depends="bind" description="generate hbm.xml files">
   <java classpathref="class.path" dir="${build.classes.dir}"
         fork="true" classname="com.u2d.persist.HBMGenerator" />
 </target>


 <!-- JiBX - related -->

 <!-- JiBX binding compiler task definition --> 
 <taskdef name="bind" classname="org.jibx.binding.ant.CompileTask">
   <classpath>
     <pathelement location="${lib.tools.dir}/bcel.jar" />
     <pathelement location="${lib.tools.dir}/jibx-bind.jar" />
     <pathelement location="${lib.dir}/jibx-run.jar" />
     <pathelement location="${lib.dir}/xpp3.jar" />
   </classpath>
 </taskdef>

 <!-- Run JiBX binding compiler -->
 <target name="bind" depends="compile" description="run JiBX binding compiler">
   <!-- turn this off;  if there's nothing to bind jibx will instead thrown an
        error;  when need to write jibx binding files for new types, uncomment this. 
   <bind binding="resources/binding.xml">
     <classpathset dir="${build.classes.dir}" />
     <classpathset dir="${lib.dir}/jmatter.jar" />
     <classpathset dir="${lib.dir}/hibernate3.jar" />
     <classpathset dir="${lib.dir}/jibx-run.jar" />
   </bind> -->
 </target>

 <target name="hbm-practice" description="run hbm practice tool" depends="genhbm">
   <java classname="com.u2d.view.swing.HBMPracticeTool" classpathref="class.path"
         fork="true" maxmemory="128m" />
 </target>

 <taskdef name="make-jnlp" classname="com.u2d.tools.JnlpMaker" 
          classpath="${lib.tools.dir}/jnlp-maker.jar:${lib.tools.dir}/velocity-dep-1.4.jar" />

 <target name="jws-dist" description="create java webstart distribution" 
         depends="jar, keystore">
   <copy todir="${jws-dist.dir}">
     <fileset dir="resources/jws" includes="*" excludes="dynamic" />
   </copy>

   <mkdir dir="${jws-dist.dir}/lib" />
   <copy todir="${jws-dist.dir}/lib">
     <fileset dir="${lib.dir}" includes="**/*.jar" />
   </copy>

   <make-jnlp template="resources/jws/dynamic/project-jnlp.vm" 
              props="resources/jws/dynamic/project.properties"
              jarbasepath="${jws-dist.dir}"
              excludejar="${jar.file}"
              tofile="${jws-dist.dir}/project.jnlp" />

   <signjar alias="unknown" storepass="public" keystore="tempKeystore">
     <fileset dir="${jws-dist.dir}" includes="**/*.jar" />
   </signjar>

   <war destfile="${war.file}" webxml="resources/web.xml"
   	    basedir="${jws-dist.dir}" />

 </target>

 <!-- targets pertaining to junit testing -->

 <target name="test-init">
   <mkdir dir="${test.classes.dir}"/>
   <mkdir dir="${test.reports.dir}"/>
 </target>

 <target name="compile-tests" depends="test-init,genhbm" description="compile tests">
   <javac debug="on" deprecation="on"
          classpathref="test.classpath" destdir="${test.classes.dir}" srcdir="${test.src.dir}" />
 </target>

 <target name="run-tests" depends="compile-tests" description="run tests" >
    <junit fork="true" haltonfailure="false" printsummary="true">
       <classpath refid="test.classpath" />
       <formatter type="xml" />
       <batchtest todir="${test.reports.dir}">
          <fileset dir="${test.classes.dir}" includes="**/*Suite.class" />
       </batchtest>
    </junit>
 </target>

 <target name="run-a-test" depends="compile-tests,bind" description="run a test">
    <junit fork="true" haltonfailure="true" printsummary="true">
       <classpath refid="test.classpath" />
       <formatter type="brief" usefile="false" /> <!-- alternative type="xml" for producing reports -->
       <batchtest todir="${test.reports.dir}">
          <fileset dir="${test.classes.dir}" includes="**/${test.name}.class" />
       </batchtest>
    </junit>
 </target>

 <target name="run-test" description="run a test class" depends="compile-tests,bind">
   <java classname="${main.class}" classpathref="test.classpath" fork="true" />
 </target>

	
 <target name="test-report" depends="run-tests" description="produce junit reports">
   <junitreport todir="${test.reports.dir}">
     <fileset dir="${test.reports.dir}" includes="TEST-*.xml" />
     <report todir="${test.reports.dir}/html" />
   </junitreport>
 </target>


 <!-- not yet fully working:  for deploying as a web application using WingS -->
 <property name="build.web.dir" location="${build.dir}/web" />
 <target name="init-web">
    <mkdir dir="${build.web.dir}" />
    <mkdir dir="${build.web.dir}/WEB-INF" />
    <mkdir dir="${build.web.dir}/WEB-INF/lib" />
    <mkdir dir="${build.web.dir}/WEB-INF/classes" />
 </target>
 <target name="web-app" depends="genhbm, init-web">
    <copy todir="${build.web.dir}/WEB-INF">
      <fileset dir="resources/web/WEB-INF" includes="web*.xml" />
      <fileset dir="${src.dir}" includes="persistClasses.xml" />
    </copy>

    <copy file="resources/web/WEB-INF/classes/commons-logging.properties" todir="${build.web.dir}/WEB-INF/classes" />
    <copy todir="${build.web.dir}/WEB-INF/classes">
       <fileset dir="${build.classes.dir}" includes="**/*" />
    </copy>
    <copy todir="${build.web.dir}/WEB-INF/lib" flatten="true">
       <fileset dir="${lib.dir}" includes="**/*.jar" />
       <fileset dir="${lib.web.dir}" includes="**/*.jar" />
    </copy>
    <copy todir="${build.web.dir}">
      <fileset dir="resources/web" excludes="*.xml" />
    </copy>
 </target>


   <target name="wings-war" depends="compile">
      <war destfile="build/nfjsmgr.war"
           webxml="resources/wings-web.xml">
         <classes dir="${build.classes.dir}" />
         <lib dir="${lib.dir}" includes="**/*.jar" />
         <lib dir="${lib.web.dir}" includes="**/*.jar" />
      </war>
   </target>

</project>
